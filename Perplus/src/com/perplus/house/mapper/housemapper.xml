<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="house">
	<sql id="default-house-select">
		select 
		HOUSE_SERIAL houseSerial,
		MEMBER_EMAIL memberEmail,
		HOUSE_REGISTER_STATUS houseRegisterStatus,
		HOUSE_TITLE houseTitle,
		HOUSE_CONTENT houseContent,
		HOUSE_NECESSARY_CONDITION houseNecessaryCondition,
		HOUSE_RATING houseRating,
		HOUSE_MARKER_X houseMarkerX,
		HOUSE_MARKER_Y houseMarkerY,
		HOUSE_MARKER_CONSTANT houseMarkerConstant
		from HOUSE
	</sql>
	<sql id="filter-house-select">
		select HOUSE_SERIAL houseSerial,
		MEMBER_EMAIL memberEmail,
		HOUSE_REGISTER_STATUS houseRegisterStatus,
		HOUSE_TITLE houseTitle,
		HOUSE_CONTENT houseContent,
		HOUSE_NECESSARY_CONDITION houseNecessaryCondition,
		HOUSE_RATING houseRating,
		HOUSE_MARKER_X houseMarkerX,
		HOUSE_MARKER_Y houseMarkerY,
		HOUSE_MARKER_CONSTANT houseMarkerConstant
	</sql>

	<sql id ="house-houseFilter-checkList-shutDown-houseZzim-join">
		select 
		h.HOUSE_SERIAL h_hSerial,h.MEMBER_EMAIL h_email,	h.HOUSE_REGISTER_STATUS,h.HOUSE_TITLE,	h.HOUSE_CONTENT,h.HOUSE_NECESSARY_CONDITION,
		h.HOUSE_RATING,	h.HOUSE_MARKER_X,h.HOUSE_MARKER_Y,	h.HOUSE_MARKER_CONSTANT,
		f.HOUSE_SERIAL f_hSerial,f.HOUSEFILTER_RANGE,f.HOUSEFILTER_GUEST_NUMBER,f.HOUSEFILTER_TYPE,f.HOUSEFILTER_ROOM_NUMBER,f.HOUSEFILTER_LOCATION,f.HOUSEFILTER_BEDROOM_NUMBER,
		f.HOUSEFILTER_BATHROOM_NUMBER,f.HOUSEFILTER_BED_NUMBER,f.HOUSEFILTER_CHECKIN_TERM,f.HOUSEFILTER_CHECKIN_START,f.HOUSEFILTER_CHECKIN_END,
		f.HOUSEFILTER_RESERVATION_TERM,f.HOUSEFILTER_BAK_MIN,f.HOUSEFILTER_BAK_MAX,f.HOUSEFILTER_PRICE,
		s.SHUTDOWN_SERIAL,s.HOUSE_SERIAL s_hSerial,s.SHUTDOWN_DATE,
		c.CHECKLIST_SERIAL,c.HOUSE_SERIAL c_hSerial,c.CODE_KIND,c.VALUE,
		z.HOUSEZZIM_SERIAL, z.HOUSE_SERIAL z_hSerial, z.MEMBER_EMAIL z_email
		from HOUSE h, HOUSEFILTER f, SHUTDOWN s, CHECKLIST c, HOUSEZZIM z
	</sql>
	
	<sql id ="house-houseFilter-housePicture">
		select
		h.HOUSE_SERIAL h_hSerial,h.MEMBER_EMAIL h_email,	h.HOUSE_REGISTER_STATUS,h.HOUSE_TITLE,	h.HOUSE_CONTENT,h.HOUSE_NECESSARY_CONDITION,
		h.HOUSE_RATING,	h.HOUSE_MARKER_X,h.HOUSE_MARKER_Y,	h.HOUSE_MARKER_CONSTANT,
		p.PICTURE_SERIAL, p.HOUSE_SERIAL p_hSerial, p.PICTURE_ORDER , p.PICTURE_NAME,
		f.HOUSE_SERIAL f_hSerial,f.HOUSEFILTER_RANGE,f.HOUSEFILTER_GUEST_NUMBER,f.HOUSEFILTER_TYPE,f.HOUSEFILTER_ROOM_NUMBER,f.HOUSEFILTER_LOCATION,f.HOUSEFILTER_BEDROOM_NUMBER,
		f.HOUSEFILTER_BATHROOM_NUMBER,f.HOUSEFILTER_BED_NUMBER,f.HOUSEFILTER_CHECKIN_TERM,f.HOUSEFILTER_CHECKIN_START,f.HOUSEFILTER_CHECKIN_END,
		f.HOUSEFILTER_RESERVATION_TERM,f.HOUSEFILTER_BAK_MIN,f.HOUSEFILTER_BAK_MAX,f.HOUSEFILTER_PRICE
		
		from HOUSE h, HOUSEPICTURE p, HOUSEFILTER f
	</sql>
	<sql id ="house-housePicture-join">
		select
		h.HOUSE_SERIAL h_hSerial,h.MEMBER_EMAIL h_email,	h.HOUSE_REGISTER_STATUS,h.HOUSE_TITLE,	h.HOUSE_CONTENT,h.HOUSE_NECESSARY_CONDITION,
		h.HOUSE_RATING,	h.HOUSE_MARKER_X,h.HOUSE_MARKER_Y,	h.HOUSE_MARKER_CONSTANT,
		p.PICTURE_SERIAL, p.HOUSE_SERIAL p_hSerial, p.PICTURE_ORDER , p.PICTURE_NAME 
		from HOUSE h,HOUSEPICTURE p
	</sql>
	<resultMap type="housevo" id="house-basic-resultmap">
		<result column="h_hSerial" property="houseSerial"/>
		<result column="h_email" property="memberEmail"/>
		<result column="HOUSE_REGISTER_STATUS" property="houseRegisterStatus"/>
		<result column="HOUSE_TITLE" property="houseTitle"/>
		<result column="HOUSE_CONTENT" property="houseContent"/>
		<result column="HOUSE_NECESSARY_CONDITION" property="houseNecessaryCondition"/>
		<result column="HOUSE_RATING" property="houseRating"/>
		<result column="HOUSE_MARKER_X" property="houseMarkerX"/>
		<result column="HOUSE_MARKER_Y" property="houseMarkerY"/>
		<result column="HOUSE_MARKER_CONSTANT" property="houseMarkerConstant"/>
	</resultMap>
	<!-- 아마 houseZzimList는 하나만 select 될 것이다(해당 회원이 해당 숙소에 찜을 했는가만 필요하기 때문에) -->
	<resultMap type="housevo" id="house-housefilter-shutdown-checklist-housezzim-join-resultmap" extends="house-basic-resultmap">
		<association property="houseFilter"  javaType="HouseFilterVo" resultMap="housefilter.housefilter-shutdown-checklist-join-resultmap"/>
		<collection property="houseZzimList" ofType="HouseZzimVo">
			<result column="HOUSEZZIM_SERIAL" property="houseZzimSerial"/>
			<result column="z_hSerial" property="houseSerial"/>
			<result column="z_email" property="memberEmail"/>
		</collection>
	</resultMap>
	
	<resultMap type="housevo" id="house-housePicture-join-resultmap" extends="house-basic-resultmap">
		<collection property="housePicture" ofType="HousePictureVo">
			<result column="PICTURE_SERIAL" property="pictureSerial"/>
			<result column="p_hSerial" property="houseSerial"/>
			<result column="PICTURE_ORDER" property="pictureOrder"/>
			<result column="PICTURE_NAME" property="pictureName"/>
		</collection>
	</resultMap>
	
	<resultMap type="houseVo" id="house-housefilter-housepicture-join-resultmap" extends ="house-basic-resultmap">
		<association property="houseFilter"  javaType="HouseFilterVo" resultMap="housefilter.houseFilter-basic-resultmap"/>
		<collection property="housePicture" ofType="HousePictureVo">
			<result column="PICTURE_SERIAL" property="pictureSerial"/>
			<result column="p_hSerial" property="houseSerial"/>
			<result column="PICTURE_ORDER" property="pictureOrder"/>
			<result column="PICTURE_NAME" property="pictureName"/>
		</collection>
	</resultMap>
	
	<select id="selectHouseByHouseSerialWithJoin" parameterType="_int" resultType="HouseVo" resultMap="house-housefilter-shutdown-checklist-housezzim-join-resultmap">
		<include refid="house-houseFilter-checkList-shutDown-houseZzim-join"/>
		where h.HOUSE_SERIAL = #{value}
		and f.HOUSE_SERIAL = h.HOUSE_SERIAL
		and s.HOUSE_SERIAL(+) = h.HOUSE_SERIAL
		and c.HOUSE_SERIAL(+) = h.HOUSE_SERIAL
		and z.MEMBER_EMAIL(+) = h.MEMBER_EMAIL
	</select>
	<!-- 최초 집이 생성될때 4개의 값이 넘어오며(첫 Serial과 Status는 자동 생성된다.)6개의 값이 저장이 된다. necessary condition을 제외한 모든것은 N.N이다 -->
	<insert id="insertHouseDefault" parameterType="housevo">
	<selectKey resultType="_int" keyProperty="houseSerial" order="BEFORE">
		select house_seq.nextval from dual
	</selectKey> 
		insert into HOUSE values(#{houseSerial},#{memberEmail},0,#{houseTitle},#{houseContent},#{houseNecessaryCondition},0,0,0,0)	
	</insert>
	<!-- 전체적인 집의 수정 (기존의 db를 select해와 필요한 부분만 채워서 재 전송)-->
	<update id="updateHouse" parameterType ="housevo">
		update HOUSE set 
		HOUSE_REGISTER_STATUS = #{houseRegisterStatus}, 
		HOUSE_TITLE = #{houseTitle}, 
		HOUSE_CONTENT = #{houseContent},
		<if test="houseNecessaryCondition!=null">
			HOUSE_NECESSARY_CONDITION = #{houseNecessaryCondition},
		</if> 
		HOUSE_RATING = #{houseRating}, 
		HOUSE_MARKER_X = #{houseMarkerX}, 
		HOUSE_MARKER_Y = #{houseMarkerY}, 
		HOUSE_MARKER_CONSTANT = #{houseMarkerConstant}
		where house_serial=#{houseSerial}
	</update>
	<!-- 지울때는 HouseSerial을 가지고 지우도록 한다. -->
	<delete id="deleteHouseByHouseSerial" parameterType="_int">
		delete from HOUSE where HOUSE_SERIAL = #{value}
	</delete>
	<!-- 단일 집을 select 할때 HouseSerial을 가지고 조회를 한다. -->
	<select id="selectHouseByHouseSerial" parameterType="_int" resultType="HouseVo">
		<include refid="default-house-select"/>
		where HOUSE_SERIAL = #{value}
	</select>
	<!-- 해당 회원이 등록한 집을 select할때 로그인한 회원의 Email을 가지고 조회를 한다 -->
	<select id="selectHouseListByMemberEmail" parameterType="String" resultType="HouseVo">
		<include refid="default-house-select"/>
		where MEMBER_EMAIL = #{value}
	</select>
	<!-- 필터 검출 후 숙소 리스트를 보여주는 곳에서 사용 -->
	<select id="selectHouseWithPictureBySerial" parameterType="_int" resultType="HouseVo" resultMap="house-housePicture-join-resultmap">
		<include refid="house-housePicture-join"/>
		where h.HOUSE_SERIAL = #{value}
		and p.HOUSE_SERIAL(+) = h.HOUSE_SERIAL
	</select>
	<select id="selectHouseWithPictureAndFilterBySerial" parameterType="_int" resultType="HouseVo" resultMap="house-housefilter-housepicture-join-resultmap">
		<include refid="house-houseFilter-housePicture"/>
		where h.HOUSE_SERIAL = #{value}
		and p.HOUSE_SERIAL(+) = h.HOUSE_SERIAL
		and f.house_serial(+) = h.house_serial
	</select>
	<!-- 필터를 통해 등록한 집을 select -> 각 필터 객체들을 hashmap으로 받아 각 where문을 통해 비교-->
	<!-- 
		HashMap List
		1. endDay , startDay
		2. guestNumber
		3. wholeRoom , privateRoom , sharedRoom
		4. housePriceMin, housePriceMax
		5-1. bedRoomNumber , bathRoomNumber, bedNumber
		5-2. 각 체크리스트 key값 (코드테이블 참조)
	 -->
	<select id="selectHouseListByFilter" parameterType="hashmap" resultType="_int">
<!-- 		<include refid="filter-house-select"/> --> 
		<!-- 최종 HOUSE 테이블의 값을 select -->
		select HOUSE_SERIAL houseSerial
		from HOUSE 
		where HOUSE_SERIAL IN
		(
			<!-- 모든 탈락을 이겨낸 최종적 HOUSEFILTER() 의 HOUSE_SERIAL을 select -->
			select HOUSE_SERIAL
			<!-- HOUSEFILTER에 join되 있는 CHECKLIST , SHUTDOWN의 탈락 여부를 통해 먼저 HOUSEFILTER 범위를 좁혀낸 다음에 HOUSEFILTER 자신의 -->
			from (
				<include refid="housefilter.default-house-filter-select-forDB"/>
				<!-- 여기서 where 조건으로 오게되는 것은 필터로 거른 CHECKLIST 와 SHUTDOWN 의  공통되는 HOUSESERIAL
				 중복 제거는 SELECT DISTINCT, 공통분모 찾기는 HAVING COUNT(HOUSE_SERIAL) = 2 로 해결
				 -->
				 <!--
				 	아래의 코드가 endDay 와 StartDay 사이에 SHUTDOWN날이 없는 HOUSE_SERIAL 검출 코드이다
				 	(if 로 endDay startDay 검출 필요)
				 	-->
				 	<!-- 
				 	select DISTINCT HOUSE_SERIAL from SHUTDOWN
					where HOUSE_SERIAL NOT IN (
						select DISTINCT HOUSE_SERIAL from SHUTDOWN
						where SHUTDOWN_DATE between '2015-10-12' and '2015-10-14'
					)
				  -->
				  <!-- 아래가 필터를 검출한 HOUSE_SERIAL 중 중복 값 만을 출력 한 것이다. 
				  -->
				<where>	
					<if test="!(endDay == null and startDay == null and list == null and listSize == null)">
						HOUSE_SERIAL in (
						select DISTINCT HOUSE_SERIAL 
						from (
						
							<if test ="endDay != null and startDay != null">
						  	<!-- SHUTDOWN >> 해당 기간안에 있는 날을 미리 select 한 다음 그 HOUSE_SERIAL들을 배제한 나머지를 select-->
					  		select DISTINCT HOUSE_SERIAL 
						  	from SHUTDOWN
							where HOUSE_SERIAL NOT IN (
								select DISTINCT HOUSE_SERIAL 
								from SHUTDOWN
								where SHUTDOWN_DATE 
								between (CAST(#{startDay} as date)) and (CAST(#{endDay} as date))
							)
					  	
							</if>
							<if test="endDay !=null and startDay !=null and list !=null and listSize != 0">
								UNION ALL
							</if>
							<if test ="list!=null and listSize != 0">
							<!-- CHECKLIST >> 사용자가 체크한 리스트를 만족하는 HOUSE의 SERIAL를 집계한 다음 최종적으로 
								집계된 SERIAL의 개수와 사용자 선택 리스트의 개수가 같은 것을 조건 만족하는 HOUSE로 인정
							--> 
								select HOUSE_SERIAL 
								from(
									select HOUSE_SERIAL 
									from CHECKLIST 
									where VALUE in
									<foreach item="item" collection="list" open="(" close=")" separator=",">
										#{item}
									</foreach>
								)
								group by HOUSE_SERIAL HAVING COUNT(*) = #{listSize}
							)
							</if>
							
							<!-- 만약 두 조건의 HOUSESERIAL이 중복된다면 모든 추가 필터의 조건을 만족하는 HOUSE로 가정한다. -->
							<if test="endDay !=null and startDay !=null and list !=null and listSize!= 0">
							group by HOUSE_SERIAL HAVING COUNT(*)>1
							</if>
							<if test="endDay == null and startDay == null and list == null and listSize == null">
								HOUSEFILTER
							)
							</if>
						)	
					</if>

					<if test="endDay != null and startDay != null and list == null and listSize == null">
						)
					</if>
				</where>
			)
			<!-- 최 외각의 From 절 (추가필터) 끝 -->
			<where>
				<!-- 여기부터가 HOUSEFILTER와 HOUSE가 가진 값을 통해 필터링이 일어나는 곳 -->
				<if test ="endDay != null and startDay != null and currentTime != null">
					and (CAST(#{endDay} as date)-CAST(#{startDay} as date)) <![CDATA[>=]]>  HOUSEFILTER_BAK_MIN
					and (CAST(#{endDay} as date)-CAST(#{startDay} as date)) <![CDATA[<=]]>  HOUSEFILTER_BAK_MAX
<!-- 					and (CAST(#{endDay} as date)-CAST(#{startDay} as date)) between HOUSEFILER_BAK_MIN and HOUSEFILTER_BAK_MAX -->
				  	and ADD_MONTHS(CAST(#{currentTime} as date),HOUSEFILTER_RESERVATION_TERM) >= CAST(#{endDay} as date)
				  	and CAST(#{currentTime} as date) + (HOUSEFILTER_CHECKIN_TERM) <![CDATA[<=]]> CAST(#{startDay} as date)		
				</if>
				<if test ="guestNumber != null">
					and HOUSEFILTER_GUEST_NUMBER >= #{guestNumber}
				</if>
				<!--  집 제공 범위  사실상 default 집전체는 모든 값 출력이므로 따로 조건문을 내줄 필요가 없다.-->
				<if test ="range != null and !range.equals('집전체')">
					and HOUSEFILTER_RANGE = #{range}
				</if>
				<if test="housePriceMin != null and housePriceMax != null">
					and (HOUSEFILTER_PRICE between #{housePriceMin} and #{housePriceMax})
				</if>
				<if test="bedRoomNumber != null ">
					and HOUSEFILTER_BEDROOM_NUMBER = #{bedRoomNumber}
				</if>
				<if test="bathRoomNumber != null ">
					and HOUSEFILTER_BATHROOM_NUMBER = #{bathRoomNumber}
				</if>
				<if test="bedNumber != null ">
					and HOUSEFILTER_BED_NUMBER = #{bedNumber}
				</if>
			</where>
		)
	</select>
<!-- 맵의 범위 지정 , 필터를 통한 select-->	
	<select id ="selectHouseBySectionAndFilter" parameterType="hashMap" resultType="houseVo" resultMap="house-housefilter-housepicture-join-resultmap">
		<include refid="house-houseFilter-housePicture"/> 
		where
		h.HOUSE_SERIAL 
		in(
			(
				select HOUSE_SERIAL houseSerial
				from HOUSE 
				where HOUSE_SERIAL IN
				(
					<!-- 모든 탈락을 이겨낸 최종적 HOUSEFILTER() 의 HOUSE_SERIAL을 select -->
					select HOUSE_SERIAL
					<!-- HOUSEFILTER에 join되 있는 CHECKLIST , SHUTDOWN의 탈락 여부를 통해 먼저 HOUSEFILTER 범위를 좁혀낸 다음에 HOUSEFILTER 자신의 -->
					from (
						<include refid="housefilter.default-house-filter-select-forDB"/>
						<!-- 여기서 where 조건으로 오게되는 것은 필터로 거른 CHECKLIST 와 SHUTDOWN 의  공통되는 HOUSESERIAL
						 중복 제거는 SELECT DISTINCT, 공통분모 찾기는 HAVING COUNT(HOUSE_SERIAL) = 2 로 해결
						 -->
						 <!--
						 	아래의 코드가 endDay 와 StartDay 사이에 SHUTDOWN날이 없는 HOUSE_SERIAL 검출 코드이다
						 	(if 로 endDay startDay 검출 필요)
						 	-->
						 	<!-- 
						 	select DISTINCT HOUSE_SERIAL from SHUTDOWN
							where HOUSE_SERIAL NOT IN (
								select DISTINCT HOUSE_SERIAL from SHUTDOWN
								where SHUTDOWN_DATE between '2015-10-12' and '2015-10-14'
							)
						  -->
						  <!-- 아래가 필터를 검출한 HOUSE_SERIAL 중 중복 값 만을 출력 한 것이다. 
						  -->
						<where>	
							<if test="!(endDay == null and startDay == null and list == null and listSize == null)">
								HOUSE_SERIAL in (
								select DISTINCT HOUSE_SERIAL 
								from (
								
									<if test ="endDay != null and startDay != null">
								  	<!-- SHUTDOWN >> 해당 기간안에 있는 날을 미리 select 한 다음 그 HOUSE_SERIAL들을 배제한 나머지를 select-->
							  		select DISTINCT HOUSE_SERIAL 
								  	from SHUTDOWN
									where HOUSE_SERIAL NOT IN (
										select DISTINCT HOUSE_SERIAL 
										from SHUTDOWN
										where SHUTDOWN_DATE 
										between (CAST(#{startDay} as date)) and (CAST(#{endDay} as date))
									)
							  	
									</if>
									<if test="endDay !=null and startDay !=null and list !=null and listSize != 0">
										UNION ALL
									</if>
									<if test ="list!=null and listSize != 0">
									<!-- CHECKLIST >> 사용자가 체크한 리스트를 만족하는 HOUSE의 SERIAL를 집계한 다음 최종적으로 
										집계된 SERIAL의 개수와 사용자 선택 리스트의 개수가 같은 것을 조건 만족하는 HOUSE로 인정
									--> 
										select HOUSE_SERIAL 
										from(
											select HOUSE_SERIAL 
											from CHECKLIST 
											where VALUE in
											<foreach item="item" collection="list" open="(" close=")" separator=",">
												#{item}
											</foreach>
										)
										group by HOUSE_SERIAL HAVING COUNT(*) = #{listSize}
									)
									</if>
									
									<!-- 만약 두 조건의 HOUSESERIAL이 중복된다면 모든 추가 필터의 조건을 만족하는 HOUSE로 가정한다. -->
									<if test="endDay !=null and startDay !=null and list !=null and listSize!= 0">
									group by HOUSE_SERIAL HAVING COUNT(*)>1
									</if>
									<if test="endDay == null and startDay == null and list == null and listSize == null">
										HOUSEFILTER
									)
									</if>
								)	
							</if>
		
							<if test="endDay != null and startDay != null and list == null and listSize == null">
								)
							</if>
						</where>
					)
					<!-- 최 외각의 From 절 (추가필터) 끝 -->
					<where>
						<!-- 여기부터가 HOUSEFILTER와 HOUSE가 가진 값을 통해 필터링이 일어나는 곳 -->
						<if test ="endDay != null and startDay != null and currentTime != null">
							and (CAST(#{endDay} as date)-CAST(#{startDay} as date)) <![CDATA[>=]]>  HOUSEFILTER_BAK_MIN
							and (CAST(#{endDay} as date)-CAST(#{startDay} as date)) <![CDATA[<=]]>  HOUSEFILTER_BAK_MAX
		<!-- 					and (CAST(#{endDay} as date)-CAST(#{startDay} as date)) between HOUSEFILER_BAK_MIN and HOUSEFILTER_BAK_MAX -->
						  	and ADD_MONTHS(CAST(#{currentTime} as date),HOUSEFILTER_RESERVATION_TERM) >= CAST(#{endDay} as date)
						  	and CAST(#{currentTime} as date) + (HOUSEFILTER_CHECKIN_TERM) <![CDATA[<=]]> CAST(#{startDay} as date)		
						</if>
						<if test ="guestNumber != null">
							and HOUSEFILTER_GUEST_NUMBER >= #{guestNumber}
						</if>
						<!--  집 제공 범위  사실상 default 집전체는 모든 값 출력이므로 따로 조건문을 내줄 필요가 없다.-->
						<if test ="range != null and !range.equals('집전체')">
							and HOUSEFILTER_RANGE = #{range}
						</if>
						<if test="housePriceMin != null and housePriceMax != null">
							and (HOUSEFILTER_PRICE between #{housePriceMin} and #{housePriceMax})
						</if>
						<if test="bedRoomNumber != null ">
							and HOUSEFILTER_BEDROOM_NUMBER = #{bedRoomNumber}
						</if>
						<if test="bathRoomNumber != null ">
							and HOUSEFILTER_BATHROOM_NUMBER = #{bathRoomNumber}
						</if>
						<if test="bedNumber != null ">
							and HOUSEFILTER_BED_NUMBER = #{bedNumber}
						</if>
					</where>
				)
				and HOUSE_SERIAL in(
					select 
					HOUSE_SERIAL
					from
					HOUSE
					where (HOUSE_MARKER_X between #{southWestLat} and #{northEastLat})
					and   (HOUSE_MARKER_Y between #{southWestLng} and #{northEastLng})
				)
			)
		)
		and f.HOUSE_SERIAL = h.HOUSE_SERIAL
		and p.HOUSE_SERIAL(+) = h.HOUSE_SERIAL
	</select>
	<select id="selectHousePriceRange"  resultType="hashmap" >
		select 	max(HOUSEFILTER_PRICE) max, min(HOUSEFILTER_PRICE) min
		from 
		(
			select HOUSEFILTER_PRICE
			from HOUSEFILTER
<!-- 			where HOUSE_SERIAL -->
<!-- 			in  -->
<!-- 			( -->
<!-- 				select h.HOUSE_SERIAL -->
<!-- 				from HOUSE h -->
<!-- 				where (h.HOUSE_MARKER_X between #{southWestLat} and #{northEastLat}) -->
<!-- 				and   (h.HOUSE_MARKER_Y between #{southWestLng} and #{northEastLng}) -->
<!-- 			) 		 -->
		)
	</select>
	<!-- 
		parameter로 
		1. 해당 house의 Serial   (serial)
		2. 클릭한 날짜 필요		   (date)
	 -->
	<select id="reservationAbleTerm" parameterType="hashmap" resultType="_int">
		select min(SHUTDOWN_DATE - CAST(#{date} as date) )
		from SHUTDOWN
		where SHUTDOWN_SERIAL in
		(
			select SHUTDOWN_SERIAL
			from SHUTDOWN
			where ( SHUTDOWN_DATE - CAST(#{date} as date) >=0)
			and HOUSE_SERIAL= #{serial}
		)
	</select>
</mapper>


