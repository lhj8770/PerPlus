<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- WebContent-ete-lee.sqlにテストコード -->
<mapper namespace="house">
	<sql id="default-house-select">
		select 
		HOUSE_SERIAL houseSerial,
		MEMBER_EMAIL memberEmail,
		HOUSE_REGISTER_STATUS houseRegisterStatus,
		HOUSE_TITLE houseTitle,
		HOUSE_CONTENT houseContent,
		HOUSE_NECESSARY_CONDITION houseNecessaryCondition,
		HOUSE_RATING houseRating,
		HOUSE_MARKER_X houseMarkerX,
		HOUSE_MARKER_Y houseMarkerY,
		HOUSE_MARKER_CONSTANT houseMarkerConstant
		from HOUSE
	</sql>
	<sql id="filter-house-select">
		select HOUSE_SERIAL houseSerial,
		MEMBER_EMAIL memberEmail,
		HOUSE_REGISTER_STATUS houseRegisterStatus,
		HOUSE_TITLE houseTitle,
		HOUSE_CONTENT houseContent,
		HOUSE_NECESSARY_CONDITION houseNecessaryCondition,
		HOUSE_RATING houseRating,
		HOUSE_MARKER_X houseMarkerX,
		HOUSE_MARKER_Y houseMarkerY,
		HOUSE_MARKER_CONSTANT houseMarkerConstant
	</sql>

	<sql id ="house-houseFilter-checkList-shutDown-houseZzim-join">
		select 
		h.HOUSE_SERIAL h_hSerial,h.MEMBER_EMAIL h_email,	h.HOUSE_REGISTER_STATUS,h.HOUSE_TITLE,	h.HOUSE_CONTENT,h.HOUSE_NECESSARY_CONDITION,
		h.HOUSE_RATING,	h.HOUSE_MARKER_X,h.HOUSE_MARKER_Y,	h.HOUSE_MARKER_CONSTANT,
		f.HOUSE_SERIAL f_hSerial,f.HOUSEFILTER_RANGE,f.HOUSEFILTER_GUEST_NUMBER,f.HOUSEFILTER_TYPE,f.HOUSEFILTER_ROOM_NUMBER,f.HOUSEFILTER_LOCATION,f.HOUSEFILTER_BEDROOM_NUMBER,
		f.HOUSEFILTER_BATHROOM_NUMBER,f.HOUSEFILTER_BED_NUMBER,f.HOUSEFILTER_CHECKIN_TERM,f.HOUSEFILTER_CHECKIN_START,f.HOUSEFILTER_CHECKIN_END,
		f.HOUSEFILTER_RESERVATION_TERM,f.HOUSEFILTER_BAK_MIN,f.HOUSEFILTER_BAK_MAX,f.HOUSEFILTER_PRICE,
		s.SHUTDOWN_SERIAL,s.HOUSE_SERIAL s_hSerial,s.SHUTDOWN_DATE,
		c.CHECKLIST_SERIAL,c.HOUSE_SERIAL c_hSerial,c.CODE_KIND,c.VALUE,
		z.HOUSEZZIM_SERIAL, z.HOUSE_SERIAL z_hSerial, z.MEMBER_EMAIL z_email
		from HOUSE h, HOUSEFILTER f, SHUTDOWN s, CHECKLIST c, HOUSEZZIM z
	</sql>
	
	<sql id ="house-houseFilter-housePicture">
		select
		h.HOUSE_SERIAL h_hSerial,h.MEMBER_EMAIL h_email,	h.HOUSE_REGISTER_STATUS,h.HOUSE_TITLE,	h.HOUSE_CONTENT,h.HOUSE_NECESSARY_CONDITION,
		h.HOUSE_RATING,	h.HOUSE_MARKER_X,h.HOUSE_MARKER_Y,	h.HOUSE_MARKER_CONSTANT,
		f.HOUSE_SERIAL f_hSerial,f.HOUSEFILTER_RANGE,f.HOUSEFILTER_GUEST_NUMBER,f.HOUSEFILTER_TYPE,f.HOUSEFILTER_ROOM_NUMBER,f.HOUSEFILTER_LOCATION,f.HOUSEFILTER_BEDROOM_NUMBER,
		f.HOUSEFILTER_BATHROOM_NUMBER,f.HOUSEFILTER_BED_NUMBER,f.HOUSEFILTER_CHECKIN_TERM,f.HOUSEFILTER_CHECKIN_START,f.HOUSEFILTER_CHECKIN_END,
		f.HOUSEFILTER_RESERVATION_TERM,f.HOUSEFILTER_BAK_MIN,f.HOUSEFILTER_BAK_MAX,f.HOUSEFILTER_PRICE,
		p.PICTURE_SERIAL, p.HOUSE_SERIAL p_hSerial, p.PICTURE_ORDER , p.PICTURE_NAME
		from HOUSE h, HOUSEFILTER f , HOUSEPICTURE p
	</sql>
	<sql id ="house-housePicture-join">
		select
		h.HOUSE_SERIAL h_hSerial,h.MEMBER_EMAIL h_email,	h.HOUSE_REGISTER_STATUS,h.HOUSE_TITLE,	h.HOUSE_CONTENT,h.HOUSE_NECESSARY_CONDITION,
		h.HOUSE_RATING,	h.HOUSE_MARKER_X,h.HOUSE_MARKER_Y,	h.HOUSE_MARKER_CONSTANT,
		p.PICTURE_SERIAL, p.HOUSE_SERIAL p_hSerial, p.PICTURE_ORDER , p.PICTURE_NAME 
		from HOUSE h,HOUSEPICTURE p
	</sql>
	<resultMap type="housevo" id="house-basic-resultmap">
		<result column="h_hSerial" property="houseSerial"/>
		<result column="h_email" property="memberEmail"/>
		<result column="HOUSE_REGISTER_STATUS" property="houseRegisterStatus"/>
		<result column="HOUSE_TITLE" property="houseTitle"/>
		<result column="HOUSE_CONTENT" property="houseContent"/>
		<result column="HOUSE_NECESSARY_CONDITION" property="houseNecessaryCondition"/>
		<result column="HOUSE_RATING" property="houseRating"/>
		<result column="HOUSE_MARKER_X" property="houseMarkerX"/>
		<result column="HOUSE_MARKER_Y" property="houseMarkerY"/>
		<result column="HOUSE_MARKER_CONSTANT" property="houseMarkerConstant"/>
	</resultMap>
	<!-- houseZzimListは一つだけがselectされる(会員が宿所をブックマーク下かどうかだけが必要)-->
	<resultMap type="housevo" id="house-housefilter-shutdown-checklist-housezzim-join-resultmap" extends="house-basic-resultmap">
		<association property="houseFilter"  javaType="HouseFilterVo" resultMap="housefilter.housefilter-shutdown-checklist-join-resultmap"/>
		<collection property="houseZzimList" ofType="HouseZzimVo">
			<result column="HOUSEZZIM_SERIAL" property="houseZzimSerial"/>
			<result column="z_hSerial" property="houseSerial"/>
			<result column="z_email" property="memberEmail"/>
		</collection>
	</resultMap>
	
	<resultMap type="housevo" id="house-housePicture-join-resultmap" extends="house-basic-resultmap">
		<collection property="housePicture" ofType="HousePictureVo">
			<result column="PICTURE_SERIAL" property="pictureSerial"/>
			<result column="p_hSerial" property="houseSerial"/>
			<result column="PICTURE_ORDER" property="pictureOrder"/>
			<result column="PICTURE_NAME" property="pictureName"/>
		</collection>
	</resultMap>
	
	<resultMap type="houseVo" id="house-housefilter-housepicture-join-resultmap" extends ="house-basic-resultmap">
		<association property="houseFilter"  javaType="HouseFilterVo" resultMap="housefilter.houseFilter-basic-resultmap"/>
		<collection property="housePicture" ofType="HousePictureVo">
			<result column="PICTURE_SERIAL" property="pictureSerial"/>
			<result column="p_hSerial" property="houseSerial"/>
			<result column="PICTURE_ORDER" property="pictureOrder"/>
			<result column="PICTURE_NAME" property="pictureName"/>
		</collection>
	</resultMap>
	
	<select id="selectHouseByHouseSerialWithJoin" parameterType="_int" resultType="HouseVo" resultMap="house-housefilter-shutdown-checklist-housezzim-join-resultmap">
		<include refid="house-houseFilter-checkList-shutDown-houseZzim-join"/>
		where h.HOUSE_SERIAL = #{value}
		and f.HOUSE_SERIAL = h.HOUSE_SERIAL
		and s.HOUSE_SERIAL(+) = h.HOUSE_SERIAL
		and c.HOUSE_SERIAL(+) = h.HOUSE_SERIAL
		and z.MEMBER_EMAIL(+) = h.MEMBER_EMAIL
	</select>
	<!-- 最初house登録するとき四つのパラメータがきて(初めてのSerialとStatusは自動的に作られる。)六個の値が保存される。necessary conditionを除外したすべてはN.N	-->
	<insert id="insertHouseDefault" parameterType="housevo">
	<selectKey resultType="_int" keyProperty="houseSerial" order="BEFORE">
		select house_seq.nextval from dual
	</selectKey> 
		insert into HOUSE values(#{houseSerial},#{memberEmail},0,#{houseTitle},#{houseContent},#{houseNecessaryCondition},0,0,0,0)	
	</insert>
	<!-- 全体的なhouseの修正 (update必要なものだけを選んで保存)-->
	<update id="updateHouse" parameterType ="housevo">
		update HOUSE set 
		HOUSE_REGISTER_STATUS = #{houseRegisterStatus}, 
		HOUSE_TITLE = #{houseTitle}, 
		HOUSE_CONTENT = #{houseContent},
		<if test="houseNecessaryCondition!=null">
			HOUSE_NECESSARY_CONDITION = #{houseNecessaryCondition},
		</if> 
		HOUSE_RATING = #{houseRating}, 
		HOUSE_MARKER_X = #{houseMarkerX}, 
		HOUSE_MARKER_Y = #{houseMarkerY}, 
		HOUSE_MARKER_CONSTANT = #{houseMarkerConstant}
		where house_serial=#{houseSerial}
	</update>
	<!-- 削除するときはHouseSerialで -->
	<delete id="deleteHouseByHouseSerial" parameterType="_int">
		delete from HOUSE where HOUSE_SERIAL = #{value}
	</delete>
	<!-- 一つのhouseをselectするときにはＨouseSerialで -->
	<select id="selectHouseByHouseSerial" parameterType="_int" resultType="HouseVo">
		<include refid="default-house-select"/>
		where HOUSE_SERIAL = #{value}
	</select>
	<!--　会員が登録したhouseをselectするときログインした会員のemailで -->
	<select id="selectHouseListByMemberEmail" parameterType="String" resultType="HouseVo">
		<include refid="default-house-select"/>
		where MEMBER_EMAIL = #{value}
	</select>
	<!--　フィルターでマーカーを出力した場合にそのマーカーを選択したとき宿所のリストを出力するところで使う -->
	<select id="selectHouseWithPictureBySerial" parameterType="_int" resultType="HouseVo" resultMap="house-housePicture-join-resultmap">
		<include refid="house-housePicture-join"/>
		where h.HOUSE_SERIAL = #{value}
		and p.HOUSE_SERIAL(+) = h.HOUSE_SERIAL
	</select>
	<select id="selectHouseWithPictureAndFilterBySerial" parameterType="_int" resultType="HouseVo" resultMap="house-housefilter-housepicture-join-resultmap">
		<include refid="house-houseFilter-housePicture"/>
		where h.HOUSE_SERIAL = #{value}
		and p.HOUSE_SERIAL(+) = h.HOUSE_SERIAL
		and f.house_serial(+) = h.house_serial
	</select>
	<!-- フィルターをもって登録されているhouseをselect→フィルターinstanceたちをhashmapのパラメータでもらい分けているwhere文をもって比較	-->
	<!-- 
		HashMap List
		1. endDay , startDay
		2. guestNumber
		3. wholeRoom , privateRoom , sharedRoom -> range
		4. housePriceMin, housePriceMax
		5-1. bedRoomNumber , bathRoomNumber, bedNumber
		5-2.　key value of each checklist		
	 -->
	<select id="selectHouseListByFilter" parameterType="hashmap" resultType="_int">
<!-- 		<include refid="filter-house-select"/> --> 
		<!-- 最終houseテーブルの値をselect -->
		select HOUSE_SERIAL houseSerial
		from HOUSE 
		where HOUSE_SERIAL IN
		(
			<!--　すべてのフィルター選択で最終的に残ったhouseのHouse＿Serialをselect -->
			select HOUSE_SERIAL
			<!--　HOUSEFILTERにjoinされているCHECKLIST、SHUTDOWNの脱落可否によって先にHOUSEFILTERの範囲を絞る -->
			from (
				<include refid="housefilter.default-house-filter-select-forDB"/>
				<!--　ここのwhere条件にできるものはフィルターで除いたCHECKLISTとSHUTDOWNの共通するHOUSESERIAL。
				重複削除はSELECT　DISTINCT、公分母探しはHAVING　COUNT(HOUSE＿SERIAL)　=　2　で解決 
				 -->
				 <!--
				 	下のコードはendDayとStartDay間のSHUTDOWNの日がないHOUSE_SERIAL検出コード				 	
				 	(ifで endDay startDay検出必要)
				 	-->
				 	<!-- テストコード
				 	select DISTINCT HOUSE_SERIAL from SHUTDOWN
					where HOUSE_SERIAL NOT IN (
						select DISTINCT HOUSE_SERIAL from SHUTDOWN
						where SHUTDOWN_DATE between '2015-10-12' and '2015-10-14'
					)
				  -->
				  <!--　下はフィルターで検出したHOUSE_SERIAL の中で重複した値だけを出力したもの。  -->
				<where>	
					<if test="!(endDay == null and startDay == null and list == null and listSize == null)">
						HOUSE_SERIAL in (
						select DISTINCT HOUSE_SERIAL 
						from (
					
						
						<choose>
							<when test="endDay != null and startDay != null">
							<!-- SHUTDOWN >>　該当する機関の中にある日を先にselectした後そのHOUSE_SERIALたちを除いた残りをselect	-->
					  		select DISTINCT HOUSE_SERIAL 
						  	from SHUTDOWN
							where HOUSE_SERIAL NOT IN (
								select DISTINCT HOUSE_SERIAL 
								from SHUTDOWN
								where SHUTDOWN_DATE 
								between (CAST(#{startDay} as date)) and (CAST(#{endDay} as date))
							)
							</when>
							<when test="endDay != null and startDay == null">
							select HOUSE_SERIAL
							from HOUSE
							</when>
							<when test="endDay == null and startDay != null">
							select HOUSE_SERIAL
							from HOUSE
							</when>		
						</choose>
							<if test="(endDay !=null or startDay !=null) and list !=null and listSize != 0">
								UNION ALL
							</if>
							<if test ="list!=null and listSize != 0">
							<!-- CHECKLIST >>　 
							ユーザーがチェックしたリストを満足するhouseのSERIALの数を取った後ユーザーの選択リストの数が同じものが探しているhouse							
							--> 
								select HOUSE_SERIAL 
								from(
									select HOUSE_SERIAL 
									from CHECKLIST 
									where VALUE in
									<foreach item="item" collection="list" open="(" close=")" separator=",">
										#{item}
									</foreach>
								)
								group by HOUSE_SERIAL HAVING COUNT(*) = #{listSize}
							)
							</if>
							
							<!--　もし二つの条件のHOUSESERIALが重複したらすべての追加フィルターの条件を満たすhouseだと認識する。 -->
							<if test="(endDay !=null or startDay !=null) and list !=null and listSize!= 0">
							group by HOUSE_SERIAL HAVING COUNT(*)>1
							</if>
							<if test="endDay == null and startDay == null and list == null and listSize == null">
								HOUSEFILTER
							)
							</if>
						)	
					</if>

					<if test="(endDay != null or startDay != null) and list == null and listSize == null">
						)
					</if>
				</where>
			)
			<!--　アウトコーナーのFrom(追加フィルター)終わり 
			 -->
			<where>
				<!--　ここからHOUSEFILTERとHOUSEが持っている値をもってフィルタリングが行われる。 
				 -->
				
				<!--　currentTimeはdefaultの値としていつも与えられる。 -->
				<!-- 1. endDay だけが選択されて与えられた場合 -->
				<if test ="endDay != null and startDay == null">
					and ADD_MONTHS((select sysdate from dual),HOUSEFILTER_RESERVATION_TERM) <![CDATA[>=]]> CAST(#{endDay} as date)
					and ((select sysdate from dual) + (HOUSEFILTER_CHECKIN_TERM)) <![CDATA[<=]]> CAST(#{endDay} as date)
				</if> 
				<!-- 2. startDay だけが選択されて与えられた場合 -->
				<if test ="endDay == null and startDay != null">
					and ADD_MONTHS((select sysdate from dual),HOUSEFILTER_RESERVATION_TERM) <![CDATA[>=]]> CAST(#{startDay} as date)
					and ((select sysdate from dual) + (HOUSEFILTER_CHECKIN_TERM)) <![CDATA[<=]]> CAST(#{startDay} as date)
				</if>
				<!-- 3. 二つすべてが与えられた場合 -->
				<if test ="endDay != null and startDay != null">
					and (CAST(#{endDay} as date)-CAST(#{startDay} as date)) <![CDATA[>=]]>  HOUSEFILTER_BAK_MIN
					and (CAST(#{endDay} as date)-CAST(#{startDay} as date)) <![CDATA[<=]]>  HOUSEFILTER_BAK_MAX
<!-- 					and (CAST(#{endDay} as date)-CAST(#{startDay} as date)) between HOUSEFILER_BAK_MIN and HOUSEFILTER_BAK_MAX -->
				  	and ADD_MONTHS((select sysdate from dual),HOUSEFILTER_RESERVATION_TERM) <![CDATA[>=]]> CAST(#{endDay} as date)
				  	and (select sysdate from dual) + (HOUSEFILTER_CHECKIN_TERM) <![CDATA[<=]]> CAST(#{startDay} as date)		
				</if>
				<if test ="guestNumber != null">
					and HOUSEFILTER_GUEST_NUMBER >= #{guestNumber}
				</if>
				<!--　houseの提供できる範囲→defaultは全体提供で他の条件は不必要  
				-->
				<if test ="range != null and !range.equals('집전체')">
					and HOUSEFILTER_RANGE = #{range}
				</if>
				<if test="housePriceMin != null and housePriceMax != null">
					and (HOUSEFILTER_PRICE between #{housePriceMin} and #{housePriceMax})
				</if>
				<if test="bedRoomNumber != null ">
					and HOUSEFILTER_BEDROOM_NUMBER = #{bedRoomNumber}
				</if>
				<if test="bathRoomNumber != null ">
					and HOUSEFILTER_BATHROOM_NUMBER = #{bathRoomNumber}
				</if>
				<if test="bedNumber != null ">
					and HOUSEFILTER_BED_NUMBER = #{bedNumber}
				</if>
			</where>
		)
	</select>
<!--　マップの範囲指定、フィルタリングでselect-->	
	<select id ="selectHouseBySectionAndFilter" parameterType="hashMap" resultType="houseVo" resultMap="house-housefilter-housepicture-join-resultmap">
		<include refid="house-houseFilter-housePicture"/> 
		where
		h.HOUSE_SERIAL 
		in
		(
				<!-- 		<include refid="filter-house-select"/> --> 
			<!--　最終HOUSEテーブルの値をselect	 -->
			select HOUSE_SERIAL houseSerial
			from HOUSE 
			where HOUSE_SERIAL IN
			(
				<!--　すべてのフィルタリングを除いたHOUSEFILTER()のHOUSE_SERIALをselect -->
				select HOUSE_SERIAL
				<!--　 HOUSEFILTERにjoinされているCHECKLIST、SHUTDOWNの脱落有無でHOUSEFILTERの範囲を絞る
				 -->
				from (
					<include refid="housefilter.default-house-filter-select-forDB"/>
					<!--　ここのwhere条件にできるものはフィルターで除いたCHECKLISTとSHUTDOWNの共通するHOUSESERIAL。
						重複削除はSELECT　DISTINCT、公分母探しはHAVING　COUNT(HOUSE＿SERIAL)　=　2　で解決 
					 -->
					 <!--
				 		下のコードはendDayとStartDay間のSHUTDOWNの日がないHOUSE_SERIAL検出コード				 	
				 		(ifで endDay startDay検出必要)
				 	-->
				 	<!-- テストコード
				 		select DISTINCT HOUSE_SERIAL from SHUTDOWN
						where HOUSE_SERIAL NOT IN (
						select DISTINCT HOUSE_SERIAL from SHUTDOWN
						where SHUTDOWN_DATE between '2015-10-12' and '2015-10-14'
						)
					  -->
				 	 <!--　下はフィルターで検出したHOUSE_SERIAL の中で重複した値だけを出力したもの。  -->
					<where>	
						<if test="!(endDay == null and startDay == null and list == null and listSize == null)">
							HOUSE_SERIAL in (
							select DISTINCT HOUSE_SERIAL 
							from (
						
							
							<choose>
								<when test="endDay != null and startDay != null">
								<!-- SHUTDOWN >>　該当する機関の中にある日を先にselectした後そのHOUSE_SERIALたちを除いた残りをselect	-->
						  		select DISTINCT HOUSE_SERIAL 
							  	from SHUTDOWN
								where HOUSE_SERIAL NOT IN (
									select DISTINCT HOUSE_SERIAL 
									from SHUTDOWN
									where SHUTDOWN_DATE 
									between (CAST(#{startDay} as date)) and (CAST(#{endDay} as date))
								)
								</when>
								<when test="endDay != null and startDay == null">
								select HOUSE_SERIAL
								from HOUSE
								</when>
								<when test="endDay == null and startDay != null">
								select HOUSE_SERIAL
								from HOUSE
								</when>		
							</choose>
								<if test="(endDay !=null or startDay !=null) and list !=null and listSize != 0">
									UNION ALL
								</if>
								<if test ="list!=null and listSize != 0">
									select HOUSE_SERIAL 
									from(
										select HOUSE_SERIAL 
										from CHECKLIST 
										where VALUE in
										<foreach item="item" collection="list" open="(" close=")" separator=",">
											#{item}
										</foreach>
									)
									group by HOUSE_SERIAL HAVING COUNT(*) = #{listSize}
								)
								</if>
								
								<if test="(endDay !=null or startDay !=null) and list !=null and listSize!= 0">
								group by HOUSE_SERIAL HAVING COUNT(*)>1
								</if>
								<if test="endDay == null and startDay == null and list == null and listSize == null">
									HOUSEFILTER
								)
								</if>
							)	
						</if>
	
						<if test="(endDay != null or startDay != null) and list == null and listSize == null">
							)
						</if>
					</where>
				)
				<where>
					<if test ="endDay != null and startDay == null">
						and ADD_MONTHS((select sysdate from dual),HOUSEFILTER_RESERVATION_TERM) <![CDATA[>=]]> CAST(#{endDay} as date)
						and ((select sysdate from dual) + (HOUSEFILTER_CHECKIN_TERM)) <![CDATA[<=]]> CAST(#{endDay} as date)
					</if> 
					<if test ="endDay == null and startDay != null">
						and ADD_MONTHS((select sysdate from dual),HOUSEFILTER_RESERVATION_TERM) <![CDATA[>=]]> CAST(#{startDay} as date)
						and ((select sysdate from dual) + (HOUSEFILTER_CHECKIN_TERM)) <![CDATA[<=]]> CAST(#{startDay} as date)
					</if>
					<if test ="endDay != null and startDay != null">
						and (CAST(#{endDay} as date)-CAST(#{startDay} as date)) <![CDATA[>=]]>  HOUSEFILTER_BAK_MIN
						and (CAST(#{endDay} as date)-CAST(#{startDay} as date)) <![CDATA[<=]]>  HOUSEFILTER_BAK_MAX
	<!-- 					and (CAST(#{endDay} as date)-CAST(#{startDay} as date)) between HOUSEFILER_BAK_MIN and HOUSEFILTER_BAK_MAX -->
					  	and ADD_MONTHS((select sysdate from dual),HOUSEFILTER_RESERVATION_TERM) <![CDATA[>=]]> CAST(#{endDay} as date)
					  	and (select sysdate from dual) + (HOUSEFILTER_CHECKIN_TERM) <![CDATA[<=]]> CAST(#{startDay} as date)		
					</if>
					<if test ="guestNumber != null">
						and HOUSEFILTER_GUEST_NUMBER >= #{guestNumber}
					</if>
					<if test ="range != null and !range.equals('집전체')">
						and HOUSEFILTER_RANGE = #{range}
					</if>
					<if test="housePriceMin != null and housePriceMax != null">
						and (HOUSEFILTER_PRICE between to_number(#{housePriceMin}) and to_number(#{housePriceMax}))
					</if>
					<if test="bedRoomNumber != null ">
						and HOUSEFILTER_BEDROOM_NUMBER = #{bedRoomNumber}
					</if>
					<if test="bathRoomNumber != null ">
						and HOUSEFILTER_BATHROOM_NUMBER = #{bathRoomNumber}
					</if>
					<if test="bedNumber != null ">
						and HOUSEFILTER_BED_NUMBER = #{bedNumber}
					</if>
				</where>
			)
		)
		and f.HOUSE_SERIAL = h.HOUSE_SERIAL
		and p.HOUSE_SERIAL(+) = h.HOUSE_SERIAL
		and (HOUSE_MARKER_X between #{southWestLat} and #{northEastLat})
		and (HOUSE_MARKER_Y between #{southWestLng} and #{northEastLng})
	</select>
	
	<select id="selectHousePriceRange"  resultType="hashmap" >
		select 	max(HOUSEFILTER_PRICE) max, min(HOUSEFILTER_PRICE) min
		from 
		(
			select HOUSEFILTER_PRICE
			from HOUSEFILTER
<!-- 			where HOUSE_SERIAL -->
<!-- 			in  -->
<!-- 			( -->
<!-- 				select h.HOUSE_SERIAL -->
<!-- 				from HOUSE h -->
<!-- 				where (h.HOUSE_MARKER_X between #{southWestLat} and #{northEastLat}) -->
<!-- 				and   (h.HOUSE_MARKER_Y between #{southWestLng} and #{northEastLng}) -->
<!-- 			) 		 -->
		)
	</select>
	<!-- 
		parameterで 
		1. 該当するhouseのSerial   (serial)
		2. クリックしたときの日が必要		   (date)
	 -->
	<select id="reservationAbleTerm" parameterType="hashmap" resultType="_int">
	
		select COALESCE(min(SHUTDOWN_DATE - CAST(#{date} as date) ), (CAST(#{lastDate} as date) - CAST(#{date} as date)) )
		from SHUTDOWN
		where SHUTDOWN_SERIAL in
		(
			select SHUTDOWN_SERIAL
			from SHUTDOWN
			where ( SHUTDOWN_DATE - CAST(#{date} as date) >=0)
			and HOUSE_SERIAL= #{serial}
		)
	
	</select>
</mapper>


